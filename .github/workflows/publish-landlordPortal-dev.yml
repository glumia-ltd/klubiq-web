name: Deploy Landlord Portal
on:
  push:
    branches: [dev, staging]
    paths:
      - "apps/landlord-portal/**"
      - "packages/**"
permissions:
  contents: read
  packages: write
env:
  NODE_ENV: ${{ github.ref == 'refs/heads/dev' && 'development' || github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' ||'development'}}
  VITE_FIREBASE_APIKEY: ${{ secrets.FIREBASE_API_KEY }}
  VITE_AUTHDOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
  VITE_PROJECTID: ${{ secrets.FIREBASE_PROJECT_ID }}
  VITE_STORAGEBUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
  VITE_MESSAGINGSENDERID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
  VITE_APPID: ${{ secrets.FIREBASE_APP_ID }}
  VITE_MEASUREMENTID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
  VITE_BASE_URL_DEV: ${{ vars.VITE_BASE_URL_DEV }}
  VITE_BASE_URL_STAGING: ${{ vars.VITE_BASE_URL_STAGING }}
  VITE_BASE_URL_PROD: ${{ vars.VITE_BASE_URL_PROD }}
  VITE_APPLICATION_NAME: landlordportal
  VITE_NODE_ENV: ${{ github.ref == 'refs/heads/dev' && 'development' || github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' ||'development'}}
  VITE_WEB_PUSH_NOTIFICATION_PUBLIC_KEY: ${{ secrets.WEB_PUSH_NOTIFICATION_PUBLIC_KEY }}
  VITE_GOOGLE_PLACES_API_KEY: ${{ secrets.VITE_GOOGLE_PLACES_API_KEY }}
  VITE_IDB_VERSION: ${{ vars.VITE_IDB_VERSION }}
  VITE_IS_GLOBALLY_AVAILABLE: ${{ vars.VITE_IS_GLOBALLY_AVAILABLE }}
  VITE_MOBILE_INVITATION_ENABLED: ${{ vars.VITE_MOBILE_INVITATION_ENABLED }}
  REACT_LP_APP_VERSION: ${{ vars.REACT_LP_APP_VERSION }}
  VITE_THEME_SWITCH_ENABLED: ${{ vars.VITE_THEME_SWITCH_ENABLED }}
  BUILD_NUMBER: ${{ github.run_number }}
  VITE_TURNSTILE_SITEKEY: ${{ secrets.VITE_TURNSTILE_SITEKEY }}
  APP: klubiq-landlord-portal
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Project
        run: |
          npm install --include=optional
          npm run version:landlord || exit 1
          # npm run buildUIC || exit 1
          npm run buildLP || exit 1
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            apps/landlord-portal/dist/
  deploy-dev:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs: build
    environment: development
    steps:
      - name: Download dev artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: artifacts/dist
      - name: Deploy to Lightsail
        uses: easingthemes/ssh-deploy@main
        with:
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.LIGHTSAIL_SSH_CERT }}
          SOURCE: 'artifacts/'
          EXCLUDE: '/node_modules/, node_modules, /node_modules'
          TARGET: ${{ secrets.TARGET_DIR }}
          SCRIPT_BEFORE: |
            sudo chown $USER ${{ secrets.TARGET_DIR }}
            cd ${{ secrets.TARGET_DIR }}
  build-and-push-image:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    environment: staging
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Check GitHub Token Permissions
        run: |
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Organization: glumia-ltd"
          echo "Token permissions check..."
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=staging-latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.staging
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    needs: build-and-push-image
    environment: staging
    steps:
      - name: Remote compose build/up
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            cd ${{ secrets.TARGET_DIR }}

            echo "Pulling latest infrastructure changes (docker-compose.yml, nginx config)..."
            git fetch origin

            echo "Resetting local repository to match remote branch..."
            git reset --hard origin/staging

            echo "Creating .env file from GitHub Secrets..."
            cat <<EOF > .apps/landlord-portal/.env
            NODE_ENV= ${{ github.ref == 'refs/heads/dev' && 'development' || github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' ||'development'}}
            VITE_FIREBASE_APIKEY= ${{ secrets.FIREBASE_API_KEY }}
            VITE_AUTHDOMAIN= ${{ secrets.FIREBASE_AUTH_DOMAIN }}
            VITE_PROJECTID= ${{ secrets.FIREBASE_PROJECT_ID }}
            VITE_STORAGEBUCKET= ${{ secrets.FIREBASE_STORAGE_BUCKET }}
            VITE_MESSAGINGSENDERID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
            VITE_APPID= ${{ secrets.FIREBASE_APP_ID }}
            VITE_MEASUREMENTID= ${{ secrets.FIREBASE_MEASUREMENT_ID }}
            VITE_BASE_URL_DEV= ${{ vars.VITE_BASE_URL_DEV }}
            VITE_BASE_URL_STAGING= ${{ vars.VITE_BASE_URL_STAGING }}
            VITE_BASE_URL_PROD=${{ vars.VITE_BASE_URL_PROD }}
            VITE_APPLICATION_NAME=landlordportal
            VITE_NODE_ENV= ${{ github.ref == 'refs/heads/dev' && 'development' || github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' ||'development'}}
            VITE_WEB_PUSH_NOTIFICATION_PUBLIC_KEY= ${{ secrets.WEB_PUSH_NOTIFICATION_PUBLIC_KEY }}
            VITE_GOOGLE_PLACES_API_KEY= ${{ secrets.VITE_GOOGLE_PLACES_API_KEY }}
            VITE_IDB_VERSION= ${{ vars.VITE_IDB_VERSION }}
            VITE_IS_GLOBALLY_AVAILABLE= ${{ vars.VITE_IS_GLOBALLY_AVAILABLE }}
            VITE_MOBILE_INVITATION_ENABLED= ${{ vars.VITE_MOBILE_INVITATION_ENABLED }}
            REACT_LP_APP_VERSION= ${{ vars.REACT_LP_APP_VERSION }}
            VITE_THEME_SWITCH_ENABLED= ${{ vars.VITE_THEME_SWITCH_ENABLED }}
            BUILD_NUMBER= ${{ github.run_number }}
            VITE_TURNSTILE_SITEKEY= ${{ secrets.VITE_TURNSTILE_SITEKEY }}
            EOF

            echo "Logging into GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            echo "Stopping old services..."
            sudo docker-compose -f docker-compose.staging.yml down || true

            echo "Starting new services. Docker Compose will pull the latest image automatically."
            sudo docker-compose -f docker-compose.staging.yml up -d --force-recreate

            echo "Cleaning up old, unused Docker images..."
            sudo docker image prune -f

            echo "Deployment to staging completed successfully!"
